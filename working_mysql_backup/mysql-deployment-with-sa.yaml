apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql-init
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: mysql-pass
#   namespace: default
# type: Opaque
# data:
#   password : hello123
--- 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-mysql-init
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      serviceAccountName: s3-access-and-ssm
      initContainers: 
      - name: model-init
        image: amazon/aws-cli
        imagePullPolicy: Always
        command:
            - bash
            - "-c"
            - |
              #!/bin/sh
              set -o pipefails
              yum -y update && yum install -y tar && yum install -y gzip
              mkdir -p /var/lib/mysql
              # Download latest file from S3 bucket
              latest_file=$(aws s3api list-objects-v2 --bucket mysql-backup-from-eks --query "reverse(sort_by(Contents[?contains(Key, 'mysql')], &LastModified))[0].Key" --output text) 
              # Check if the variable is empty
              if [ -z "$latest_file" ]; then
                echo "The is no backup in s3."
              # If the variable is not empty, run this code
              else
                aws s3 cp s3://mysql-backup-from-eks/$latest_file /var/lib/
                # Untar the downloaded file
                cd /var/lib/ && tar -xvzf /var/lib/$latest_file
                ls -al
                # Remove downloaded filecd 
                #rm -rf new
                # Start the actual container process
                exec "$@" 
              fi
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: db_password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: secrets-store-inline-mysql
          mountPath: "/mnt/secrets"
          readOnly: true
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      - name: secrets-store-inline-mysql
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: nginx-deployment-spc-k8s-secrets 
